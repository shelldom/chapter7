{'TMP': 'C:\\Users\\eduardoh\\AppData\\Local\\Temp', 'COMPUTERNAME': 'WINDOWS7', 'USERDOMAIN': 'windows7', 'PSMODULEPATH': 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'PROCESSOR_IDENTIFIER': 'x86 Family 6 Model 42 Stepping 7, GenuineIntel', 'PROGRAMFILES': 'C:\\Program Files', 'PROCESSOR_REVISION': '2a07', 'HOME': 'C:\\Python27;C:\\Python27\\Scripts', 'PATH': 'C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Python27;C:\\Python27\\Scripts;C:\\Python27;C:\\Python27\\Scripts', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'TEMP': 'C:\\Users\\eduardoh\\AppData\\Local\\Temp', 'PROCESSOR_ARCHITECTURE': 'x86', 'SYSTEMROOT': 'C:\\Windows', 'ALLUSERSPROFILE': 'C:\\ProgramData', 'SESSIONNAME': 'Console', 'HOMEPATH': '\\Users\\eduardoh', 'USERNAME': 'eduardoh', 'LOGONSERVER': '\\\\WINDOWS7', 'PROMPT': '$P$G', 'LOCALAPPDATA': 'C:\\Users\\eduardoh\\AppData\\Local', 'PROGRAMDATA': 'C:\\ProgramData', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC', 'FP_NO_HOST_CHECK': 'NO', 'WINDIR': 'C:\\Windows', 'APPDATA': 'C:\\Users\\eduardoh\\AppData\\Roaming', 'HOMEDRIVE': 'C:', 'SYSTEMDRIVE': 'C:', 'NUMBER_OF_PROCESSORS': '1', 'PROCESSOR_LEVEL': '6', 'OS': 'Windows_NT', 'PUBLIC': 'C:\\Users\\Public', 'USERPROFILE': 'C:\\Users\\eduardoh'}